---

- name: Install necessary packages to do the dump (Postgres)
  apt:
    pkg:
      - postgresql-client
      - python-psycopg2
      - libpq-dev
    state: present
  when: ansible_distribution == 'Debian' and dbengine == 'postgres'

- name: Install necessary packages to do the dump (Postgres)
  yum:
    name:
      - postgresql-lib
      - postgresql-devel
    state: present
  when: ansible_distribution == 'Redhat' and dbengine == 'postgres'

- name: Install necessary packages to do the dump (Mysql)
  apt:
    pkg:
      - python-pymysql
    state: present
  when: ansible_distribution == 'Debian' and dbengine == 'mysql'

- name: Install necessary packages to do the dump (Mysql)
  yum:
    name:
      - python2-PyMySQL
    state: present
  when: ansible_distribution == 'Redhat' and dbengine == 'mysql'

- name: Set default dump folder if not set
  set_fact:
    local_dump_folder: "dumps"
  when: not local_dump_folder is defined

- name: Create local installation directory if it does not exist
  file:
    path: "{{ local_dump_folder }}"
    state: directory
  delegate_to: localhost
  changed_when: false

- name: Do a database dump (Mysql)
  # This assumes that mysqldump is installed (this is the case on a frontend normally)
  mysql_db:
    name: "{{ moodle_database.dbname }}"
    login_host: "{{ moodle_database.dbhost }}"
    login_user: "{{ moodle_database.dbuser }}"
    login_password: "{{ moodle_database.password }}"
    state: dump
    target: /tmp/dump.sql.bz2
  changed_when: false
  when: dbengine == 'mysql'

- name: Do a database dump (Postgres)
  # This assumes that pg_dump is installed (this is the case on a frontend normally)
  postgresql_db:
    name: "{{ moodle_database.dbname }}"
    login_host: "{{ moodle_database.dbhost }}"
    login_user: "{{ moodle_database.dbuser }}"
    login_password: "{{ moodle_database.password }}"
    state: dump
    target: /tmp/dump.sql.bz2
  changed_when: false
  when: dbengine == 'postgres'

- name: Compress archive
  archive:
    path: "/tmp/dbdump.sql"
    dest: "/tmp/dbdump.sql.gz"
    format: gz
    force_archive: true
  changed_when: false

- name: Fetch archive
  fetch:
    src: "/tmp/dbdump.sql.gz"
    flat: true
    dest: "{{ local_dump_folder }}/moodledata-{{ inventory_hostname }}.{{ ansible_date_time.epoch }}.tar.gz"

- name: Delete Archive
  file:
    state: absent
    path: "/tmp/dbdump.sql.gz"
  changed_when: false
